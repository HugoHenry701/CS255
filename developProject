#include <iostream>
#include <iomanip>
#include <cstring>
#include <fstream>
#include<stdio.h> 
#include<stdlib.h>
#include <ctime>
using namespace std;

//constructor
const int max_group = 2; 
const int max_member = 4;
const int max_project = 7;
int project_size = 0;

struct Date{
	int d,m,y;
};
struct Student {
	int studentID;
	string studentName;
};
struct Submission {
	int pr;
	Date submitDate;
	int projectStatus = 0; //notSubmit = 3, ontime=1 , late=2, pending=0
};
struct Project{
	int projectID;
	Date deadline;
    
};
struct Group{
	int groupID;
	int groupSize;
	Student member[max_member];
    Submission sub[max_project];
};
//prototype
	//--input
		//++group
		void groupInput(Group team[]);
		bool checkExist(Group team[], int size, int student);
		void displayAllGroup(Group team[], int size);
		void displayOneGroup(Group team[], int i);
		void saveAllGroup(Group team[], int size, fstream &file);	
	void modeGroup (Group team[]);
	void projectDeclare (Project duAn[] );
	void projectModify (Project duAn[]);
	int showMenu();
	//---mode
	void modeGroup();
	void modeProject(Project pro[]);
	void modeSubmit(Group nhom[], Project pnumber[]);
	//--void
	void checkSubmit ( Group nhom[]);
	int checkState(Project pnumber[], int projectNum, int d, int m, int y);
	void submitProject(Group nhom[],int num,Project pnumber[]);
	bool checkGroupID(Group nhom[],int size	,int id);
	string convertState(int state);
	bool checkProjectID(Project pnumber[],int id);
	int findPositionbyGID(Group arr[], int GID);
	int findPositionbyPID(Project arr[], int PID);
    void getCurrentTime(Date &date);
    void totalStatisticFile(Group nhom[],  fstream &inFile,Project pnumber[],int size);
    int getProjectNum(Project pnumber[], Date inputDate);
    void updateAllState(Group nhom[], Project pnumber[]);
    void totalStatistic(Group nhom[],Project pnumber[],int size);
//main
int main(){
	//struct
	Group nhom[max_group];	
	Project pnumber[max_project];
   fstream groupFile,overallFile;
   Date currentDate;

	
	//param
	int choice;
	char showChoice;
	//menu
	do
	{
		choice = showMenu();
		switch(choice)
		{
			//input group Information
			case 1: modeGroup(nhom);
				break;
			//declare project Information
			case 2: modeProject(pnumber);
				break;
			case 3: modeSubmit(nhom,pnumber);
			cout << endl;
				break;
			case 4: cout << "Coding..." << endl;
				break;
			case 5:	int overChoice;
	char overallChoice;
	int numProject;
    Date currentDate;
    updateAllState(nhom, pnumber);
	do
	{
	cout << "---Overall Statistic---\n";
	cout << "1. Input a specific date.\n";
	cout << "2. Use the current date.\n";
		cout << "Enter your choice: ";
		cin >> overChoice;
		switch(overChoice){
			case 1: 
			cout << "Input date to statistic (day month year, seperated by a space): ";
              cin >> currentDate.d >> currentDate.m >> currentDate.y;
               if (numProject == -1)
           {
              cout << "Please check the input date again!";
		   }
		    else
           {
              totalStatistic(nhom,pnumber, (numProject+1));
              totalStatisticFile(nhom,overallFile,pnumber, (numProject+1));
           }
				break;
			case 2: getCurrentTime(currentDate);
			 numProject = getProjectNum(pnumber, currentDate);
           if (numProject == -1)
           {
              cout << "Please check the input date again!";
		   }
		    else
           {
              totalStatistic(nhom,pnumber, (numProject+1));
              totalStatisticFile(nhom,overallFile,pnumber, (numProject+1));
           }

				break;
			default : cout << "Invalid input of choice, please select the choice from 1 to 2.\n";
		}
		cout << "Do you want to back to Project mode (Y/N)? ";
		cin >> overallChoice;
		system("CLS");
	}while(overallChoice != 'N');

				break;
			case 6: cout << "Coding..." << endl;
				break;
			case 7: exit(1);
				break;
			default : cout << "Invalid input of choice, please select the choice from 1 to 7.\n";
		}
		cout << "Do you want to go back the menu (Y/N)? ";
		cin >> showChoice;
		system("CLS");
	}while(showChoice != 'N');
	
	
	// ahihi
	 

	 
}

//SubFunc

//mode
int showMenu (){
	int choice;
	cout << "--------LACKOFWOMEN--------\n";
	cout << "%%WELCOME TO OURS PROGRAM%%\n";
	cout << "MENU\n";
	cout << "1. Group information.\n";
	cout << "2. Project Declaration.\n";
	cout << "3. Submission.\n";
	cout << "4. Statistic search.\n";
	cout << "5. Overall statistic.\n";
	cout << "6. Find uncompleted group.\n";
	cout << "7. Exit.\n";
	cout << "Enter your choice to use the service: ";
	cin >> choice;
	return choice;
}
void modeGroup ( Group team[])
{
	int choice2,printChoice;
	char groupmodeChoice;
	fstream groupFile;
	do{
		cout << "---Group Mode---";
		cout << "\n1. Input information of group\n";
	   	cout << "2. Display information\n";
	   	cout << "3. Save group information to file\n";
	   	cout << "Enter your choice: ";
	   	cin >> choice2;
		switch(choice2)
               {
                   case 1:
                       groupInput(team);
                       break;
                   case 2:
                       cout << "Do you want to display all group or a specified group\n";
                       cout << "Enter 0 for all group or another number for group number: ";
                       cin >> printChoice;
                       if (printChoice == 0)
                       {
                           displayAllGroup(team, max_group);
                       }
                       else
                       {
                           displayOneGroup(team, printChoice - 1);
                       }
                       break;
                   case 3:
                       saveAllGroup(team, max_group, groupFile);
                       cout << "Save group information to file successfully!\n";
                       break;
                	default: cout << "Invalid input. Please enter number between 1 and 3.\n";
               }	
               cout << "Do you want to go back Group Mode (Y/N)? ";
               cin >> groupmodeChoice;
               if(groupmodeChoice == 'Y')
               		system("CLS");
	}while(groupmodeChoice != 'N');
}
void modeProject (Project pro[]){
	int modePchoice;
	char modeChoice;
	do
	{
		cout << "---Project Mode---\n";
		cout << "1. Declare mode.\n";
		cout << "2. Modify mode.\n";
		cout << "Enter your choice: ";
		cin >> modePchoice;
		switch(modePchoice){
			case 1: projectDeclare(pro);
				break;
			case 2: projectModify(pro); 
				break;
			default : cout << "Invalid input of choice, please select the choice from 1 to 2.\n";
		}
		cout << "Do you want to back to Project mode (Y/N)? ";
		cin >> modeChoice;
		if(modeChoice == 'Y')
			system("CLS");
	}while(modeChoice != 'N');	
}
void modeSubmit(Group nhom[], Project pnumber[]){
	int modeSchoice;
	char modeChoice;
	do
	{
		cout << "---Submit Mode---\n";
		cout << "1. Declare mode.\n";
		cout << "2. Check mode.\n";
		cout << "Enter your choice: ";
		cin >> modeSchoice;
		switch(modeSchoice){
			case 1: submitProject(nhom,project_size,pnumber);
				break;
			case 2: checkSubmit(nhom); 
				break;
			default : cout << "Invalid input of choice, please select the choice from 1 to 2.\n";
		}
		cout << "Do you want to back to Submit mode (Y/N)? ";
		cin >> modeChoice;
		if(modeChoice == 'Y')
			system("CLS");
	}while(modeChoice != 'N');
}

//func

//group
void groupInput(Group team[])
{
   int id;
   int IDcheck;
   for (int i=0; i< max_group; i++)
   {
       cout << "Enter groupID: ";
       cin >> team[i].groupID;
       cout << "Enter group size: ";
       cin >> team[i].groupSize;
       cin.ignore();
       for (int j=0; j < team[i].groupSize; j++)
       {
           cout << "Enter student name " << (j+1) << " : ";
           getline(cin,team[i].member[j].studentName);
           cout << "Enter student ID: " ;
           cin >> id;
           cin.ignore();
           while (checkExist(team, max_group, id))
           {
               cout << "The member have been exist! Enter again: \n";
               cout << "Enter student name " << (j+1) << " : ";
               getline(cin,team[i].member[j].studentName);
               cout << "Enter student ID: " ;
               cin >> id;
               cin.ignore();
           }
           team[i].member[j].studentID= id;
       }
   }

   cout << "-------------------------------------\n";
   cout << "Group information: " << endl;
   for (int i=0;i<max_group; i++){
       cout << "GroupID is: " << team[i].groupID << endl;
       cout << "Group number: " << team[i].groupSize << endl;
       cout << "Group member " << (i+1) << " : " << endl;
       for(int j=0;j < team[i].groupSize;j++)
       {
           cout << "Student name is: " << team[i].member[j].studentName << endl;
           cout << "Student ID: " << team[i].member[j].studentID << endl;
       }
       cout << endl;
   }

}
bool checkExist(Group team[], int size, int IDcheck)
{
   for (int i = 0; i <= size; i++)
   {
       for (int j = 0;  j < max_member ;j++)
       {
           if (team[i].member[j].studentID == IDcheck)
           {
               return true;
           }
       }
   }
   return false;
}
void displayAllGroup(Group team[], int size)
{
   cout << setw(10) << left << "Group" << setw(10) << left << "Member" << setw(10) << left << "StudentID" << endl;
   for (int i = 0; i < size; i++)
   {
       cout << setw(10) << left << team[i].groupID;
       for (int j = 0; j < team[i].groupSize; j++)
       {
           if (j > 0)
           {
               cout << setw(10) << " " << left;
               cout << setw(10) << left << team[i].member[j].studentName << setw(10) << left << team[i].member[j].studentID << endl;
           }
           else
           {
               cout << setw(10) << left << team[i].member[j].studentName << setw(10) << left << team[i].member[j].studentID << endl;
           }
       }
   }
}
void displayOneGroup(Group team[], int i)
{
   cout << setw(10) << left << "Group" << setw(10) << left << "Member" << endl;
   cout << setw(10) << left << team[i].groupID;
   for (int j = 0; j < team[i].groupSize; j++)
   {
       if (j > 0)
       {
           cout << setw(10) << " " << left;
           cout << setw(10) << left << team[i].member[j].studentName << setw(10) << left << team[i].member[j].studentID << endl;
       }
       else
       {
           cout << setw(10) << left << team[i].member[j].studentName << setw(10) << left << team[i].member[j].studentID << endl;
       }
   }
}


void saveAllGroup(Group team[], int size, fstream &file)
{
   file.open("group.txt", ios::out);
   if (file.is_open())
   {
       file << setw(10) << left << "Group" << setw(10) << left << "Member" << setw(10) << left << "StudentID" << endl;
       for (int i = 0; i < size; i++)
       {
           file << setw(10) << left << team[i].groupID;
           for (int j = 0; j < team[i].groupSize; j++)
           {
               if (j > 0)
               {
                   file << setw(10) << " " << left;
                   file << setw(10) << left << team[i].member[j].studentName << setw(10) << left << team[i].member[j].studentID << endl;
               }
               else
               {
                   file << setw(10) << left << team[i].member[j].studentName << setw(10) << left << team[i].member[j].studentID << endl;
               }
           }
       }
   }
   else
   {
       cout << "Can't open file to save, please check again!\n";
   }

}

//project
void projectModify (Project duAn[]){
	int modifyIndex;
	int modifyChoice;
	char saveChoice;
	char modifyMenuChoice;
	char modifyMenuChoiceAgain;
	string input;
	ifstream iFile;
	iFile.open("projectInfo.txt");
	if (project_size==0)
	{
		cout << "Data is NULL.\n";
		return;
	}
	cout << "List of the current project information: \n";
	while(!iFile.eof()){
		getline(iFile,input);
		cout << input << endl;
	}
	cout << "\nDo you want to modify (Y/N)? ";
	cin >> modifyMenuChoice ;
	if (modifyMenuChoice == 'N')
	 	return;
	else if (modifyMenuChoice == 'Y')
	{
		cout << "Enter the position of the project that you want to modify: ";
		cin >> modifyIndex;
		do
		{
			cout << "------------------------------------------\n";
			cout << "The current information of project " << modifyIndex << " is: \n";
			cout << "1.Project number: " << duAn[modifyIndex-1].projectID << endl;
			cout << "2.Project submission deadline: " << duAn[modifyIndex-1].deadline.d <<  ":"  << duAn[modifyIndex-1].deadline.m << ":"  << duAn[modifyIndex-1].deadline.y << endl; 
			cout << "Which element you want to modify? ";
			cin >> modifyChoice;
			switch(modifyChoice)
			{
				case 1: cout << "Enter alter project number: ";
						cin >> duAn[modifyIndex-1].projectID;
						break;
				case 2: cout << "Enter alter deadline submission DD/MM/YYYY: ";
						cin >> duAn[modifyIndex-1].deadline.d >> duAn[modifyIndex-1].deadline.m >> duAn[modifyIndex-1].deadline.y;
						break;
				default: cout << "Invalid input of choice, please select the choice from 1 to 2.\n";
			}
			cout << "------------------------------------------\n";
			cout << "The current information of project " << modifyIndex << " is: \n";
			cout << "1.Project number: " << duAn[modifyIndex-1].projectID << endl;
			cout << "2.Project submission deadline: " << duAn[modifyIndex-1].deadline.d <<  ":"  << duAn[modifyIndex-1].deadline.m << ":"  << duAn[modifyIndex-1].deadline.y << endl; 
			
			cout << "Do you want to modify again (Y/N)? ";
			cin >> modifyMenuChoiceAgain;
		}while(modifyMenuChoiceAgain != 'N');
		cout << "Do you want to save (Y/N)? "	;
		cin >> saveChoice;
		if(saveChoice=='N')
			return;
		else{
			cout << "Starting save...";
			ofstream outFile;
			outFile.open("projectInfo.txt",ios::trunc);
			for(int j=0; j<project_size; j++)
			{
				outFile << "Project number " << duAn[j].projectID << endl;
				outFile << "Deadline submission is: " << duAn[j].deadline.d << ":" << duAn[j].deadline.m << ":" << duAn[j].deadline.y << endl;
				outFile << endl;
			}
			outFile.close();
			cout <<"done.\n";
	}
	}		
}
void projectDeclare (Project duAn[] ){
	char saveChoice;
	do
	{
		cout << "Enter the positive number of projects for all course: ";
		cin >> project_size;
		if((project_size < 0)||(project_size > 7)){
		
			cout << "Invalid input of number of projects for all course.\n ";
			cout << "Please try input smaller than 7.\n";
		}
	}while((project_size < 0)||(project_size > 7));
	
	for (int i=0; i<project_size; i++){
		cout << "Creating the project index " << (i+1) << " : \n";
		cout << "Enter the project number: ";
		cin >> duAn[i].projectID;
		cout << "Enter the submission deadline DD/MM/YYYY: ";
		cin >> duAn[i].deadline.d >> duAn[i].deadline.m >> duAn[i].deadline.y;
	}
	cout << "-------------------------------------------\n";
	cout << "List of project information: \n";
	for(int j=0; j<project_size; j++)
	{
		cout << "Project number " << duAn[j].projectID << endl;
		cout << "Deadline submission is: " << duAn[j].deadline.d << ":" << duAn[j].deadline.m << ":" << duAn[j].deadline.y << endl;
		cout << endl;
	}
	cout << "Do you want to save (Y/N)? "	;
	cin >> saveChoice;
	if(saveChoice=='N')
		return;
	else{
		cout << "Starting save...";
		ofstream outFile("projectInfo.txt");
		for(int j=0; j<project_size; j++)
		{
			outFile << "Project number " << duAn[j].projectID << endl;
			outFile << "Deadline submission is: " << duAn[j].deadline.d << ":" << duAn[j].deadline.m << ":" << duAn[j].deadline.y << endl;
			outFile << endl;
		}
		outFile.close();
		cout <<"done.\n";
	}
}

//submit
void submitProject(Group nhom[],int num, Project pnumber[]){
	int gID,pID,posP,posG;
	char submitChoice;
	do
	{
		do{
			cout << "Enter the group id: ";
			cin >> gID;
			if (checkGroupID(nhom,max_group, gID))
			cout << "Wrong group id. Please enter again.\n";
		}while(checkGroupID(nhom,max_group,gID));
		int i,j,pos;
		//check groupId, projectId xong tra ve hai cai bien position
		for(i=0; i< max_group; i++)
		{
			if(gID == nhom[i].groupID)
			{
				pos = i;	
			}
		}
		for(j=0; j < project_size; j++)
		{
					cout << "Submit place " << (j+1) << endl;
					do
					{
						cout << "Enter the project id you want to submit: ";
						cin >> nhom[pos].sub[j].pr;
						if (checkProjectID(pnumber,nhom[pos].sub[j].pr))
							cout << "Wrong project  id. Please enter again.\n";
					}while(checkProjectID(pnumber,nhom[pos].sub[j].pr));
					cout << "Note: enter 0 0 0 for unsubmitted project.\n";
					cout << "Enter the date submit DD/MM/YYYY seperated by whitespace: ";
					cin >> nhom[pos].sub[j].submitDate.d >> nhom[pos].sub[j].submitDate.m >> nhom[pos].sub[j].submitDate.y;
					nhom[pos].sub[j].projectStatus = checkState(pnumber, nhom[pos].sub[j].pr, nhom[pos].sub[j].submitDate.d, nhom[pos].sub[j].submitDate.m, nhom[pos].sub[j].submitDate.y); 
		}
		cout << "Do you want to submit another group? (Y/N)? ";
		cin >>submitChoice;	
		if(submitChoice == 'Y')
			system("CLS");
	}while(submitChoice != 'N');
	
}
void checkSubmit ( Group nhom[]){
	cout << "List of submissions:\n";
	for (int i=0; i< max_group; i++){
		cout << "Group number: " << nhom[i].groupID << endl;
		cout << "Submission list: \n";
		for (int j=0; j< project_size; j++){			
			cout << "Project number: " << nhom[i].sub[j].pr << endl;
			cout << "Submitted date: " << nhom[i].sub[j].submitDate.d << ":" << nhom[i].sub[j].submitDate.m << ":" << nhom[i].sub[j].submitDate.y << endl;
			cout << "Submit status: " << convertState(nhom[i].sub[j].projectStatus) << endl;
		}
		cout << "----------------------------------\n";
	}
}
int checkState(Project pnumber[], int projectNum, int d, int m, int y)
{
  	Date compare;
  	compare= pnumber[projectNum-1].deadline;
  	if(y == 0)
  		return 3;
  	else if (compare.y > y)
  		return 1;
 	else if(compare.y == y){
 		if(m == 0)
 			return 3;
 		else if (compare.m > m)
 			return 1;
 		else if(compare.m == m)
 		{
 			if(d == 0)
			 	return 3;
			else if(compare.d > d)
				return 1;
			else if(compare.d == d)
			{
				return 1;	
			}
			else
				return 2;	
		}
		else
			return 2;
	 }
	else 
		return 2;
}

//Algo
string convertState(int state)
{
  if (state == 1)
  {
     return "On Time";
  }
  else if (state == 2)
  {
     return "Late";
  }
  else if (state == 3)
  { 
  	return "Not Submit";
  }
  else
  {
     return "Pending";
  }
}
bool checkGroupID(Group nhom[],int size	,int num){
	int i;
	for(i=0;i<size;i++){
		if(nhom[i].groupID==num)
			return false;
	}
	return true;
}

bool checkProjectID(Project pnumber[],int id){
	int i,j;
	for(j=0;j<max_project;j++){
		if(id == pnumber[j].projectID)
			return false;
		}
	return true;
}
int findPositionbyPID(Project arr[], int PID){
	int pos;
	for(int i=0; i < project_size; i++)
	{
		if(arr[i].projectID == PID){
			pos = i;
		}
	}
	return pos;
}
int findPositionbyGID(Group arr[], int GID){
	int pos;
	for(int i=0; i <max_group; i++)
	{
		if(arr[i].groupID == GID){
			pos = i;
		}
	}
	return pos;
}

void getCurrentTime(Date &date)
{
  time_t t = time(0);
   tm* now = localtime(&t);
   date.y = now->tm_year + 1900;
   date.m = now->tm_mon + 1;
   date.d = now->tm_mday;
}

void totalStatistic(Group nhom[],Project pnumber[],int size)
{
  string state, pr, temp;
  cout << "The toal submission information:\n";
 
  cout << left << setw(8) << "Group";
  cout << left << setw(15) << "Student Name";
  for (int i = 0; i < size; i++)
  {
     pr = "Project ";
     cout << left << setw(10) << pr<<pnumber[i].projectID;
  }
  cout << endl;
  for (int j = 0; j < max_group; j++)
  {
     cout << left << setw(8) << nhom[j].groupID;
     cout << left << setw(15) << nhom[j].member[0].studentName;
     for (int i = 0; i < size; i++)
     {
        state = convertState(nhom[j].sub[i].projectStatus);
        cout << left << setw(15) << state;
     }
     cout << endl;
     for (int k = 1; k < nhom[j].groupSize; k++)
     {
        cout << left << setw(8) << " ";
        cout << left << setw(15) << nhom[j].member[k].studentName;
        cout << endl;
     }
  }
}

void updateAllState(Group nhom[], Project pnumber[])
{
  int state;
  Date currentDate;
  getCurrentTime(currentDate);
 
  for (int i = 0; i < max_group; i++)
  {
     for (int j = 0; j <project_size ; j++)
     {
        if (nhom[i].sub[j].projectStatus == 0)
        {
           state = checkState(pnumber, j, currentDate.d, currentDate.m, currentDate.y);
           if (state == 2)
           {
              nhom[i].sub[j].projectStatus = 2;
           }
        }
     }
  }
}
int getProjectNum(Project pnumber[],Date inputDate)
{
  int index = 0, temp, i;
  bool check = false;
  for (i = 0; i < project_size; i++)
  {
     temp = checkState(pnumber, i, inputDate.d, inputDate.m, inputDate.y);
     if (temp == 1)
     {
        check = true;
        index = i - 1;
        break;
     }
  }
  if (check == false)
  {
     index = project_size - 1;
  }
  return index;
}


void totalStatisticFile(Group nhom[],  fstream &inFile,Project pnumber[],int size)
{
 
  inFile.open("OverallStatistic.txt", ios::out);
  if (inFile.is_open())
  {
     string state, pr, temp;
     inFile << "The toal submission information:\n";
 
     inFile << left << setw(8) << "Group";
     inFile << left << setw(15) << "Student Name";
     for (int i = 0; i < size; i++)
     {
        pr = "Project ";
        inFile << left << setw(10) << pr<<pnumber[i].projectID;
     }
     inFile << endl;
     for (int j = 0; j < max_group; j++)
     {
        inFile << left << setw(8) << nhom[j].groupID;
        inFile << left << setw(15) << nhom[j].member[0].studentName;
        for (int i = 0; i < size; i++)
        { 
           state = convertState(nhom[j].sub[i].projectStatus);
           inFile << left << setw(15) << state;
        }
        inFile << endl;
        for (int k = 1; k < nhom[j].groupSize; k++)
        {
           inFile << left << setw(8) << " ";
           inFile << left << setw(15) << nhom[j].member[k].studentName;
           inFile << endl;
        }
     }
  }
  else
  {
     cout << "Can't open file to save, please check again!\n";
  }
}


